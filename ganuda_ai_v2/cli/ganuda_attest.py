#!/usr/bin/env python3
"""
Ganuda Attestation CLI Tool
Generated by Executive Jr - Cherokee Constitutional AI
Purpose: 2-of-3 Chiefs governance attestation with signed artifacts
"""

import os
import click
import hashlib
import yaml
from pathlib import Path
from typing import List, Dict
import requests
from datetime import datetime


def _hash_artifact(artifact_path: str) -> str:
    """Calculate SHA256 hash of artifact file"""
    with open(artifact_path, 'rb') as f:
        return hashlib.sha256(f.read()).hexdigest()


def _query_chief_attestation(chief: str, artifacts: Dict[str, str], message: str) -> Dict:
    """Query Chief's Executive Jr for attestation via Ollama API"""
    # Map chief names to nodes
    node_map = {
        'war': 'localhost',  # REDFIN
        'peace': 'bluefin',
        'medicine': 'sasass2'
    }

    node = node_map.get(chief.lower(), 'localhost')

    prompt = f"""# Cherokee Constitutional AI Attestation Request

**Artifacts**: {list(artifacts.keys())}
**Message**: {message}

As Executive Jr for {chief.title()} Chief, do you ATTEST to these artifacts?
Respond with: ATTEST or NOT ATTEST, followed by your signature reasoning (2-3 sentences)."""

    try:
        response = requests.post(
            f'http://{node}:11434/api/generate',
            json={
                'model': 'executive_jr_resonance:latest',
                'prompt': prompt,
                'stream': False,
                'options': {'temperature': 0.7}
            },
            timeout=60
        )
        attestation_text = response.json().get('response', '')

        return {
            'chief': chief,
            'node': node,
            'status': 'ATTEST' if 'ATTEST' in attestation_text else 'NOT ATTEST',
            'reasoning': attestation_text,
            'timestamp': datetime.utcnow().isoformat() + 'Z'
        }
    except Exception as e:
        return {
            'chief': chief,
            'node': node,
            'status': 'ERROR',
            'error': str(e),
            'timestamp': datetime.utcnow().isoformat() + 'Z'
        }


@click.command()
@click.option('--chiefs', '-c', required=True, help='Comma-separated list of chiefs (war,peace,medicine)')
@click.option('--artifacts', '-a', required=True, multiple=True, type=click.Path(exists=True), help='Artifact files to attest')
@click.option('--signatures', '-s', default='2-of-3', help='Quorum requirement (e.g., 2-of-3)')
@click.option('--message', '-m', required=True, help='Attestation message')
@click.option('--output', '-o', default='attestation.yaml', help='Output YAML file')
def attest(chiefs: str, artifacts: tuple, signatures: str, message: str, output: str):
    """
    Cherokee Constitutional AI Attestation CLI

    Queries Chiefs' Executive JRs for governance attestation and generates signed YAML.

    Example:
        ganuda attest --chiefs war,peace,medicine \\
                      --artifacts week1_report.md challenge4.png \\
                      --signatures 2-of-3 \\
                      --message "Week 1 Validation Complete"
    """
    chiefs_list = [c.strip() for c in chiefs.split(',')]

    click.echo(f"🔥 Ganuda Attestation - Cherokee Constitutional AI")
    click.echo(f"=" * 60)
    click.echo(f"Chiefs: {', '.join(chiefs_list)}")
    click.echo(f"Artifacts: {len(artifacts)} files")
    click.echo(f"Quorum: {signatures}")
    click.echo(f"Message: {message}")
    click.echo()

    # Calculate artifact hashes
    click.echo("📋 Calculating artifact hashes...")
    artifact_hashes = {}
    for artifact in artifacts:
        artifact_name = Path(artifact).name
        artifact_hashes[artifact_name] = _hash_artifact(artifact)
        click.echo(f"  {artifact_name}: {artifact_hashes[artifact_name][:16]}...")

    click.echo()

    # Query each Chief for attestation
    click.echo("⚔️  Querying Chiefs for attestation...")
    attestations = []
    for chief in chiefs_list:
        click.echo(f"  Consulting {chief.title()} Chief...", nl=False)
        attestation = _query_chief_attestation(chief, artifact_hashes, message)
        attestations.append(attestation)

        status_icon = "✅" if attestation['status'] == 'ATTEST' else "❌"
        click.echo(f" {status_icon} {attestation['status']}")

    click.echo()

    # Check quorum
    required, total = map(int, signatures.split('-of-'))
    attested_count = sum(1 for a in attestations if a['status'] == 'ATTEST')
    quorum_met = attested_count >= required

    # Generate YAML output
    attestation_doc = {
        'attestation': {
            'date': datetime.utcnow().isoformat() + 'Z',
            'message': message,
            'artifacts': artifact_hashes,
            'chiefs': attestations,
            'quorum': {
                'requirement': signatures,
                'attested': attested_count,
                'total': total,
                'met': quorum_met
            },
            'status': 'ATTESTED' if quorum_met else 'NOT ATTESTED'
        }
    }

    with open(output, 'w') as f:
        yaml.dump(attestation_doc, f, default_flow_style=False, sort_keys=False)

    # Summary
    click.echo("📜 Attestation Summary")
    click.echo(f"=" * 60)
    click.echo(f"Attested: {attested_count}/{total} Chiefs")
    click.echo(f"Quorum: {'✅ MET' if quorum_met else '❌ NOT MET'} ({signatures})")
    click.echo(f"Output: {output}")
    click.echo()

    if quorum_met:
        click.echo("✅ Week 2 attestation successful! Mitakuye Oyasin 🦅🕊️🌿")
        return 0
    else:
        click.echo("❌ Quorum not met. Additional Chiefs required.")
        return 1


if __name__ == '__main__':
    attest()
