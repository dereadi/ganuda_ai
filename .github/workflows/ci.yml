# Cherokee Constitutional AI - Continuous Integration
# Meta Jr's quality governance workflow
#
# Runs on every push and pull request to ensure tribal standards
# Peace Chief mandate: "Every commit must pass tribal standards"

name: Cherokee CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  # Unit and Functional Tests
  test:
    name: Unit & Functional Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 bandit safety

      - name: Run unit tests
        run: |
          pytest tests/test_unit_thermal_memory.py -v --tb=short

      - name: Run functional tests
        run: |
          pytest tests/test_functional_voting.py -v --tb=short

      - name: Check test coverage
        run: |
          pip install pytest-cov
          pytest tests/ -v --cov=. --cov-report=term-missing --ignore=tests/test_e2e_query_flow.py

  # Code Quality & Style
  quality:
    name: Code Quality (flake8)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: |
          # E501: line too long (we allow 120 chars, not 79)
          # W503: line break before binary operator (Black style)
          flake8 . --count --max-line-length=120 --ignore=E501,W503 \
            --exclude=.git,__pycache__,venv,env,.venv,.github \
            --statistics

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit (security linter)
        run: |
          bandit -r . -ll -x ./tests,./venv,./env,./.venv

      - name: Check dependencies for known vulnerabilities (Safety)
        run: |
          pip install -r requirements.txt
          safety check --json || echo "Safety check found issues (non-blocking)"

      - name: Run GitHub CodeQL (if available)
        uses: github/codeql-action/analyze@v2
        continue-on-error: true
        with:
          languages: python

  # Docker Build Test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cd infra
          docker build -t cherokee-ai:ci-test .

      - name: Test Docker image
        run: |
          docker run --rm cherokee-ai:ci-test python --version
          docker run --rm cherokee-ai:ci-test pip list

  # Dependency Check
  dependencies:
    name: Dependency Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check for dependency vulnerabilities
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          pip-audit --requirement requirements.txt || echo "pip-audit found issues (non-blocking)"

  # Tribal Governance Check
  governance:
    name: Tribal Governance Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify SECURITY.md exists
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "❌ SECURITY.md missing (War Chief requirement)"
            exit 1
          fi
          echo "✅ SECURITY.md present"

      - name: Verify GOVERNANCE.md exists
        run: |
          if [ ! -f GOVERNANCE.md ]; then
            echo "❌ GOVERNANCE.md missing (Peace Chief requirement)"
            exit 1
          fi
          echo "✅ GOVERNANCE.md present"

      - name: Verify API versioning
        run: |
          if ! grep -q "/api/v1/" api/main.py; then
            echo "❌ API v1 versioning missing (Peace Chief requirement)"
            exit 1
          fi
          echo "✅ API v1 versioning present"

      - name: Verify dependencies are pinned
        run: |
          if grep -q ">=" requirements.txt; then
            echo "❌ Dependencies not pinned (Memory Jr requirement for Seven Generations)"
            exit 1
          fi
          echo "✅ Dependencies pinned with =="

  # All checks pass - ready to deploy
  all-checks:
    name: All Tribal Standards Met
    runs-on: ubuntu-latest
    needs: [test, quality, security, docker, dependencies, governance]

    steps:
      - name: Tribal Council Approval
        run: |
          echo "🦅 =============================================="
          echo "   Cherokee Constitutional AI - CI/CD PASS"
          echo "   All tribal standards met!"
          echo "   "
          echo "   ✅ Tests passing (unit + functional)"
          echo "   ✅ Code quality (flake8)"
          echo "   ✅ Security scanned (bandit + safety)"
          echo "   ✅ Docker builds successfully"
          echo "   ✅ Dependencies secure"
          echo "   ✅ Governance validated"
          echo "   "
          echo "   Mitakuye Oyasin! 🔥"
          echo "=============================================="
