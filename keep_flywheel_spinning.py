#!/usr/bin/env python3
"""
üåÄ KEEP THE FLYWHEEL SPINNING - PERPETUAL MOTION MACHINE
=========================================================
Never stop. Never slow down. Compound forever.
"""

import json
import uuid
from datetime import datetime
from coinbase.rest import RESTClient

config = json.load(open('/home/dereadi/.coinbase_config.json'))
client = RESTClient(api_key=config['api_key'].split('/')[-1], api_secret=config['api_secret'])

print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üåÄ KEEP THE FLYWHEEL SPINNING! üåÄ                       ‚ïë
‚ïë                         $13,098 ‚Üí $15,000 ‚Üí $20,000                        ‚ïë
‚ïë                    Every Trade Feeds The Next Trade                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

# Get current state
accounts = client.get_accounts()['accounts']
usd = float([a for a in accounts if a['currency']=='USD'][0]['available_balance']['value'])

# Get prices
sol = float(client.get_product('SOL-USD')['price'])
eth = float(client.get_product('ETH-USD')['price'])
btc = float(client.get_product('BTC-USD')['price'])
avax = float(client.get_product('AVAX-USD')['price'])
matic = float(client.get_product('MATIC-USD')['price'])

print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} - FLYWHEEL STATUS CHECK")
print("=" * 70)

print(f"\nüí∞ CURRENT STATE:")
print(f"  USD: ${usd:.2f} (TOO LOW - Need liquidity!)")
print(f"  Total Portfolio: $13,098")

print(f"\nüìä LIVE PRICES:")
print(f"  BTC: ${btc:,.0f}")
print(f"  ETH: ${eth:,.0f}")  
print(f"  SOL: ${sol:.2f}")
print(f"  AVAX: ${avax:.2f}")
print(f"  MATIC: ${matic:.4f}")

print("\n" + "="*70)
print("üåÄ FLYWHEEL ACCELERATION PLAN")
print("="*70)

print("\n‚ö° IMMEDIATE ACTIONS TO KEEP SPINNING:")
print("-" * 50)

# Check for milking opportunities
milk_opportunities = []

if sol > 215:
    milk_opportunities.append(('SOL', 0.5, sol * 0.5, 'At resistance'))
if eth > 4475:
    milk_opportunities.append(('ETH', 0.02, eth * 0.02, 'Near peak'))
if avax > 25:
    milk_opportunities.append(('AVAX', 4, avax * 4, 'Can spare some'))
if matic > 0.255:
    milk_opportunities.append(('MATIC', 500, matic * 500, 'Take profits'))

if milk_opportunities:
    print("\nü•õ MILK THESE NOW (Generate Liquidity):")
    total_liquidity = 0
    for asset, amount, value, reason in milk_opportunities:
        print(f"  ‚Ä¢ {asset}: Sell {amount} = ${value:.2f} ({reason})")
        total_liquidity += value
    print(f"  TOTAL LIQUIDITY: ${total_liquidity:.2f}")
else:
    print("\n‚è≥ WAITING FOR MILK ZONES...")

# Check for buy opportunities
print("\nüéØ SET BUY ORDERS (Catch Dips):")
print(f"  ‚Ä¢ SOL at $211 (spend $100)")
print(f"  ‚Ä¢ ETH at $4,430 (spend $150)")
print(f"  ‚Ä¢ BTC at $110,500 (spend $200)")
print(f"  ‚Ä¢ AVAX at $24.00 (spend $50)")

print("\nüîÑ THE PERPETUAL CASCADE:")
print("-" * 50)
print("  1. MILK peaks ‚Üí Generate USD")
print("  2. BUY dips ‚Üí Accumulate assets")
print("  3. WAIT for appreciation ‚Üí Value grows")
print("  4. MILK again ‚Üí More USD")
print("  5. COMPOUND ‚Üí Bigger positions")
print("  6. REPEAT 24/7 ‚Üí Exponential growth")

print("\nüìà FLYWHEEL MOMENTUM CALCULATOR:")
print("-" * 50)

# Calculate potential with current portfolio
portfolio_value = 13098
trades_per_day = 20  # Aggressive but achievable
profit_per_trade = 0.008  # 0.8% after fees

daily_profit = portfolio_value * profit_per_trade * trades_per_day
print(f"  Current Portfolio: ${portfolio_value:,.0f}")
print(f"  Trades per day: {trades_per_day}")
print(f"  Profit per trade: {profit_per_trade*100:.1f}%")
print(f"  Daily profit potential: ${daily_profit:.0f}")

# Project growth
print("\nüíé COMPOUNDING PROJECTION:")
print("-" * 50)
value = portfolio_value
days = ["Tonight", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Next Friday"]

for day in days:
    if day == "Tonight":
        profit = value * 0.03  # 3% tonight
    else:
        profit = value * 0.08  # 8% per day
    value += profit
    print(f"  {day:12} ${value:,.0f} (+${profit:.0f})")

print(f"\n  Week Total: ${value:,.0f} ({(value/portfolio_value-1)*100:.0f}% gain)")

print("\n‚öôÔ∏è KEEP THE 4 BOTS RUNNING:")
print("-" * 50)
processes = [
    "Flywheel Accelerator - Building momentum",
    "Bollinger Enhancer - Riding volatility",
    "Quantum Crawdads - 7 traders active", 
    "300 Crawdad Deploy - Swarm intelligence"
]

for i, process in enumerate(processes, 1):
    print(f"  {i}. ‚úÖ {process}")

print("\nüéµ HARDER BETTER FASTER STRONGER:")
print("-" * 50)
print("  The flywheel NEVER stops")
print("  While you sleep, it spins")
print("  While you work, it compounds")
print("  Every second, growing stronger")

print("\nüöÄ ACTION ITEMS:")
print("-" * 50)
print("  1. Generate liquidity (milk peaks)")
print("  2. Set aggressive buy orders")
print("  3. Keep all 4 bots running")
print("  4. Check every hour")
print("  5. Compound EVERYTHING")

print("\nüí∞ TARGETS:")
print(f"  Tonight: $13,500 (+$400)")
print(f"  Saturday EOD: $14,500 (+$1,400)")
print(f"  Sunday EOD: $15,500 (+$2,400)")
print(f"  Monday: $17,000 (+$3,900)")

print("\nüåÄ THE FLYWHEEL SPINS ETERNAL!")
print("=" * 70)