#!/usr/bin/env python3
"""
‚è∞ 15:30 IN 3 MINUTES! ‚è∞
Another institutional hour approaches!
Often see pumps at :30 marks
Get ready!
"""

import json
from coinbase.rest import RESTClient
from datetime import datetime
import time

config = json.load(open('/home/dereadi/.coinbase_config.json'))
key = config['api_key'].split('/')[-1]
client = RESTClient(api_key=key, api_secret=config['api_secret'], timeout=5)

print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                      ‚è∞ 15:30 IN 3 MINUTES! ‚è∞                             ‚ïë
‚ïë                   Institutional Half-Hour Approaching! üìä                  ‚ïë
‚ïë                        Get Ready for Movement! üöÄ                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

current_time = datetime.now()
seconds_to_1530 = (30 - current_time.minute) * 60 - current_time.second
minutes_to_1530 = seconds_to_1530 // 60

print(f"Time: {current_time.strftime('%H:%M:%S')}")
print(f"T-minus {minutes_to_1530}:{seconds_to_1530 % 60:02d} to 15:30")
print("=" * 70)

# Get current prices
btc = client.get_product('BTC-USD')
sol = client.get_product('SOL-USD')
eth = client.get_product('ETH-USD')

btc_price = float(btc['price'])
sol_price = float(sol['price'])
eth_price = float(eth['price'])

print("\nüìä CURRENT STATUS (3 MIN TO 15:30):")
print("-" * 50)
print(f"BTC: ${btc_price:,.2f}")
print(f"SOL: ${sol_price:,.2f} ‚òÄÔ∏è CLIMBING!")
print(f"ETH: ${eth_price:,.2f}")

# Pattern analysis
print("\nüìà 15:30 PATTERN:")
print("-" * 50)
print("Historical patterns at :30 marks:")
print("  ‚Ä¢ Institutional rebalancing")
print("  ‚Ä¢ Algorithm triggers")
print("  ‚Ä¢ Volume spikes common")
print("  ‚Ä¢ Often continuation of :00 moves")

# What happened at 15:00
print("\nüî• WHAT HAPPENED AT 15:00:")
print("-" * 50)
print("‚úÖ Predicted explosion happened!")
print("‚úÖ Bought bottom at $111,863")
print("‚úÖ Now at ${:,.2f}".format(btc_price))
print("‚úÖ SOL climbing strong!")

# 15:30 Forecast
print("\nüéØ 15:30 FORECAST:")
print("-" * 50)
if btc_price > 112000:
    print("BTC above $112K = BULLISH")
    print("  ‚Üí Expect continuation pump")
    print("  ‚Üí Target: $112,500")
    print("  ‚Üí SOL likely to accelerate")
else:
    print("BTC consolidating")
    print("  ‚Üí Building for next leg")

# Check our readiness
accounts = client.get_accounts()
usd_balance = 0
for account in accounts['accounts']:
    if account['currency'] == 'USD':
        usd_balance = float(account['available_balance']['value'])
        break

print(f"\nüí∞ READINESS:")
print("-" * 50)
print(f"USD: ${usd_balance:.2f}")
print("Crawdads: Active but eating USD!")
print("Council: Watching and ready!")

# Final countdown
print(f"\n‚è∞ COUNTDOWN:")
print("-" * 50)
for i in range(3, 0, -1):
    print(f"  {i} minutes...")
    if i > 1:
        time.sleep(0.5)

print("\nüöÄ PREPARE FOR 15:30!")
print("-" * 50)
print("Watch for:")
print("  ‚Ä¢ Volume spike")
print("  ‚Ä¢ SOL acceleration")
print("  ‚Ä¢ BTC push to $112,500")
print("  ‚Ä¢ ETH following")

print(f"\n{'‚è∞' * 35}")
print("15:30 IN 3 MINUTES!")
print(f"SOL: ${sol_price:,.2f} CLIMBING!")
print("GET READY!")
print("üöÄ" * 35)