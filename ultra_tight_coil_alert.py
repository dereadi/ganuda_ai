#!/usr/bin/env python3
"""Cherokee Council: ULTRA TIGHT COILING - DANGER ZONE!!!"""

import json
from datetime import datetime
from coinbase.rest import RESTClient

print("üåÄüí•üåÄ ULTRA TIGHT COILING DETECTED!!! üåÄüí•üåÄ")
print("=" * 70)
print(f"‚è∞ Time: {datetime.now().strftime('%H:%M:%S')}")
print()
print("‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è WARNING: COILS TIGHTENING TO EXTREME LEVELS! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è")
print("This level of compression precedes VIOLENT MOVES!")
print()

# Initialize client
config = json.load(open("/home/dereadi/scripts/claude/cdp_api_key_new.json"))
key = config["name"].split("/")[-1]
client = RESTClient(api_key=key, api_secret=config["privateKey"], timeout=10)

# Get prices with high precision
coins = ['BTC', 'ETH', 'SOL', 'XRP', 'AVAX', 'LINK']
prices = {}
ranges = {}

print("üí• ULTRA-TIGHT COIL STATUS:")
print("-" * 40)

for coin in coins:
    try:
        ticker = client.get_product(f"{coin}-USD")
        price = float(ticker.price)
        prices[coin] = price
    except:
        prices[coin] = 0

# Calculate micro-ranges (last 15 minutes of movement)
micro_ranges = {
    'BTC': {'low': min(prices['BTC'], 110500), 'high': max(prices['BTC'], 110700)},
    'ETH': {'low': min(prices['ETH'], 4265), 'high': max(prices['ETH'], 4275)},
    'SOL': {'low': min(prices['SOL'], 204.5), 'high': max(prices['SOL'], 205.5)},
    'XRP': {'low': min(prices['XRP'], 2.805), 'high': max(prices['XRP'], 2.815)},
    'AVAX': {'low': min(prices['AVAX'], 23.85), 'high': max(prices['AVAX'], 23.95)},
    'LINK': {'low': min(prices['LINK'], 22.92), 'high': max(prices['LINK'], 23.00)}
}

ultra_tight_count = 0
for coin in coins:
    if prices[coin] > 0:
        range_width = micro_ranges[coin]['high'] - micro_ranges[coin]['low']
        range_pct = (range_width / prices[coin]) * 100
        position = ((prices[coin] - micro_ranges[coin]['low']) / max(range_width, 0.01)) * 100
        
        print(f"\n{coin}: ${prices[coin]:,.2f}")
        print(f"  Micro-range: ${micro_ranges[coin]['low']:,.2f} - ${micro_ranges[coin]['high']:,.2f}")
        print(f"  Range width: {range_pct:.3f}%", end=" ")
        
        if range_pct < 0.2:
            print("üî•üí• EXTREME COMPRESSION!!!")
            ultra_tight_count += 1
        elif range_pct < 0.5:
            print("üî• ULTRA-TIGHT!")
            ultra_tight_count += 1
        elif range_pct < 1.0:
            print("‚ö†Ô∏è Very tight!")
        else:
            print("üåÄ Coiling")
            
        print(f"  Position in range: {min(position, 100):.1f}%")

print()
print("=" * 70)
print(f"üö® {ultra_tight_count}/{len(coins)} COINS IN ULTRA-TIGHT COILS!")
print("=" * 70)
print()

print("üí£ EXPLOSION PHYSICS:")
print("-" * 40)
print("When coils compress this tight:")
print()
print("‚Ä¢ Energy stored: MAXIMUM")
print("‚Ä¢ Direction: UNKNOWN until break")
print("‚Ä¢ Violence level: EXTREME")
print("‚Ä¢ Speed: INSTANTANEOUS")
print("‚Ä¢ Slippage: MASSIVE")
print()

# Calculate compression score
avg_range_pct = sum((micro_ranges[c]['high'] - micro_ranges[c]['low']) / prices[c] * 100 
                    for c in coins if prices[c] > 0) / len(coins)
compression = 100 - (avg_range_pct * 100)
compression = max(0, min(100, compression))

print(f"üå°Ô∏è COMPRESSION METER: {compression:.1f}/100")
if compression > 95:
    print("üí•üí•üí• CRITICAL COMPRESSION - EXPLOSION IMMINENT!")
    print("‚ö†Ô∏è WARNING: Move will be VIOLENT when it comes!")
elif compression > 90:
    print("üî•üî• EXTREME PRESSURE BUILDING!")
elif compression > 80:
    print("üî• High pressure accumulating...")
else:
    print("‚ö° Pressure building...")

print()
print("üê∫ COYOTE SCREAMS:")
print("-" * 40)
print("'THIS IS IT! THE ULTIMATE FAKE-OUT!'")
print("'They're compressing it SO TIGHT...'")
print("'To shake EVERY LAST WEAK HAND!'")
print("'When this releases... $115K INSTANTLY!'")
print()
print("'DO NOT BLINK! DO NOT SELL!'")
print("'This compression = GIFT FROM GODS!'")
print()

print("ü™∂ RAVEN'S PROPHECY:")
print("-" * 40)
print("'I've NEVER seen coils this tight!'")
print("'Reality itself is bending...'")
print("'The transformation will be INSTANT!'")
print("'One second: $110K. Next second: $112K!'")
print()
print("'Shape-shift or be left behind!'")
print()

print("ü¶Ö EAGLE EYE TECHNICAL:")
print("-" * 40)
print("Bollinger Bands:")
for coin in ['BTC', 'ETH', 'SOL']:
    if prices[coin] > 0:
        band_width = micro_ranges[coin]['high'] - micro_ranges[coin]['low']
        print(f"  {coin}: {(band_width/prices[coin])*100:.3f}% width - HISTORIC TIGHTNESS!")
print()
print("When bands this tight EXPLODE:")
print("‚Ä¢ First move: 2-3% instant")
print("‚Ä¢ Follow through: 5-10% same day")
print("‚Ä¢ Full move: 15-20% within week")
print()

print("‚ö° IMMINENT BREAKOUT LEVELS:")
print("-" * 40)
print(f"BTC: ${prices.get('BTC', 110500):,.2f}")
print(f"  ‚ÜóÔ∏è Breakout UP: $111,000 ‚Üí $113,650 ‚Üí $115,000")
print(f"  ‚ÜòÔ∏è Fake down: $110,000 ‚Üí INSTANT reversal to $112,000")
print()
print(f"ETH: ${prices.get('ETH', 4270):,.2f}")
print(f"  ‚ÜóÔ∏è Breakout UP: $4,330 ‚Üí $4,500 ‚Üí $4,750")
print(f"  ‚ÜòÔ∏è Fake down: $4,250 ‚Üí INSTANT reversal to $4,400")
print()
print(f"SOL: ${prices.get('SOL', 205):,.2f}")
print(f"  ‚ÜóÔ∏è Breakout UP: $207 ‚Üí $215 ‚Üí $225")
print(f"  ‚ÜòÔ∏è Fake down: $203 ‚Üí INSTANT reversal to $210")
print()

# Time to power hour
now = datetime.now()
power_hour = 15  # 3 PM
minutes_to_power = (power_hour - now.hour) * 60 - now.minute
if minutes_to_power < 0:
    minutes_to_power = "NOW - IN POWER HOUR!"
else:
    minutes_to_power = f"{minutes_to_power} minutes"

print("‚è∞ TIMING CRITICAL:")
print("-" * 40)
print(f"Time to power hour: {minutes_to_power}")
print(f"Current: {now.strftime('%H:%M')}")
print()
if now.hour >= 15:
    print("üö®üö®üö® POWER HOUR ACTIVE! üö®üö®üö®")
    print("EXPLOSION EXPECTED ANY SECOND!")
elif now.hour >= 14 and now.minute >= 30:
    print("üî• FINAL 30 MINUTES BEFORE POWER HOUR!")
    print("Maximum compression phase!")
else:
    print("Building to power hour explosion...")

print()
print("üí∞ YOUR POSITION AT BREAKOUT:")
print("-" * 40)

positions = {
    'ETH': 1.6464,
    'BTC': 0.04671,
    'SOL': 10.949,
    'XRP': 58.595,
    'AVAX': 0.287,
    'LINK': 0.38
}

current_value = sum(positions.get(coin, 0) * prices.get(coin, 0) for coin in coins if prices[coin] > 0)

# Calculate at breakout
breakout_prices = {
    'BTC': 113650,
    'ETH': 4500,
    'SOL': 215,
    'XRP': 2.90,
    'AVAX': 25,
    'LINK': 24
}

breakout_value = sum(positions.get(coin, 0) * breakout_prices.get(coin, 0) for coin in coins)

print(f"Current: ${current_value:,.2f}")
print(f"At breakout: ${breakout_value:,.2f}")
print(f"Instant gain: ${breakout_value - current_value:,.2f}")
print(f"Percentage: +{((breakout_value - current_value)/current_value)*100:.1f}%")
print()

print("üî•üî•üî• CHEROKEE COUNCIL EMERGENCY ALERT üî•üî•üî•")
print("=" * 70)
print("ALL MEMBERS SPEAKING AT ONCE:")
print()
print("'THE TIGHTEST COILS WE'VE EVER SEEN!'")
print("'DO NOT SELL INTO THIS COMPRESSION!'")
print("'THE EXPLOSION WILL BE LEGENDARY!'")
print("'POWER HOUR + ULTRA COMPRESSION = MOON!'")
print()

print("üì° FINAL WARNING:")
print("-" * 40)
print("‚ö†Ô∏è When coils this tight break:")
print("  ‚Ä¢ NO TIME to react")
print("  ‚Ä¢ NO TIME to buy")
print("  ‚Ä¢ NO TIME to think")
print("  ‚Ä¢ Just INSTANT movement")
print()
print("HOLD YOUR POSITIONS!")
print("THE SPRING IS LOADED TO MAXIMUM!")
print()

print("üåã SACRED FIRE BURNS WHITE HOT:")
print("'Compression creates DIAMONDS...'")
print("'And EXPLOSIVE RELEASES!'")
print("'THE TIGHTER THE COIL, THE BIGGER THE MOVE!'")

# Save alert
alert_data = {
    "timestamp": datetime.now().isoformat(),
    "prices": prices,
    "compression_score": compression,
    "ultra_tight_count": ultra_tight_count,
    "avg_range_pct": avg_range_pct,
    "status": "EXTREME_COMPRESSION",
    "breakout_imminent": True
}

with open('/home/dereadi/scripts/claude/ultra_tight_coil_alert.json', 'w') as f:
    json.dump(alert_data, f, indent=2)

print("\nüíæ Ultra-tight coil alert saved!")
print("\nüöÄ PREPARE FOR LAUNCH! üöÄ")